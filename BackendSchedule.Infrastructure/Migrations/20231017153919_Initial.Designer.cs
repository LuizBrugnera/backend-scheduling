// <auto-generated />
using System;
using BackendSchedule.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackendSchedule.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231017153919_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BackendSchedule.Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("SchedulingId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<int>("WorkId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SchedulingId");

                    b.HasIndex("WorkId");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            SchedulingId = 1,
                            StartTime = new TimeSpan(0, 10, 30, 0, 0),
                            WorkId = 1
                        });
                });

            modelBuilder.Entity("BackendSchedule.Domain.Entities.Professional", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.HasKey("Id");

                    b.ToTable("Professional");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "jhon@gmail.com",
                            Name = "Jhon Carlos",
                            Password = "jhon123",
                            Phone = "54996054176"
                        },
                        new
                        {
                            Id = 2,
                            Email = "damanga@gmail.com",
                            Name = "Ze Da Manga",
                            Password = "damanga123",
                            Phone = "54943022176"
                        },
                        new
                        {
                            Id = 3,
                            Email = "batista@gmail.com",
                            Name = "Amado Batista",
                            Password = "batista123",
                            Phone = "21948212432"
                        });
                });

            modelBuilder.Entity("BackendSchedule.Domain.Entities.Scheduling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.Property<bool>("WorkDay")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Scheduling");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Day = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfessionalId = 1,
                            WorkDay = true
                        });
                });

            modelBuilder.Entity("BackendSchedule.Domain.Entities.Work", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double?>("Price")
                        .HasColumnType("double");

                    b.Property<int>("ProfessionalId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("Work");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = new TimeSpan(0, 1, 0, 0, 0),
                            Name = "Corte de Cabelo",
                            Price = 25.0,
                            ProfessionalId = 1
                        },
                        new
                        {
                            Id = 2,
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            Name = "Massagem",
                            Price = 50.0,
                            ProfessionalId = 1
                        },
                        new
                        {
                            Id = 3,
                            Duration = new TimeSpan(0, 0, 30, 0, 0),
                            Name = "Manicure",
                            ProfessionalId = 3
                        });
                });

            modelBuilder.Entity("BackendSchedule.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("BackendSchedule.Domain.Entities.Scheduling", "Scheduling")
                        .WithMany("AppointmentList")
                        .HasForeignKey("SchedulingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackendSchedule.Domain.Entities.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BackendSchedule.Domain.DataStructure.Customer", "Customer", b1 =>
                        {
                            b1.Property<int>("AppointmentId")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .HasColumnType("longtext")
                                .HasColumnName("CustomerEmail");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("CustomerName");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("CustomerPhone");

                            b1.HasKey("AppointmentId");

                            b1.ToTable("Appointment");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentId");
                        });

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Scheduling");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("BackendSchedule.Domain.Entities.Scheduling", b =>
                {
                    b.HasOne("BackendSchedule.Domain.Entities.Professional", "Professional")
                        .WithMany("SchedulingList")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("BackendSchedule.Domain.DataStructure.TimePeriods", "TimePeriods", b1 =>
                        {
                            b1.Property<int>("SchedulingId")
                                .HasColumnType("int");

                            b1.Property<TimeSpan?>("EndAfternoon")
                                .HasColumnType("time(6)");

                            b1.Property<TimeSpan?>("EndMorning")
                                .HasColumnType("time(6)");

                            b1.Property<TimeSpan?>("EndNight")
                                .HasColumnType("time(6)");

                            b1.Property<TimeSpan?>("StartAfternoon")
                                .HasColumnType("time(6)");

                            b1.Property<TimeSpan?>("StartMorning")
                                .HasColumnType("time(6)");

                            b1.Property<TimeSpan?>("StartNight")
                                .HasColumnType("time(6)");

                            b1.HasKey("SchedulingId");

                            b1.ToTable("Scheduling");

                            b1.WithOwner()
                                .HasForeignKey("SchedulingId");
                        });

                    b.Navigation("Professional");

                    b.Navigation("TimePeriods")
                        .IsRequired();
                });

            modelBuilder.Entity("BackendSchedule.Domain.Entities.Work", b =>
                {
                    b.HasOne("BackendSchedule.Domain.Entities.Professional", "Professional")
                        .WithMany("WorkList")
                        .HasForeignKey("ProfessionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("BackendSchedule.Domain.Entities.Professional", b =>
                {
                    b.Navigation("SchedulingList");

                    b.Navigation("WorkList");
                });

            modelBuilder.Entity("BackendSchedule.Domain.Entities.Scheduling", b =>
                {
                    b.Navigation("AppointmentList");
                });
#pragma warning restore 612, 618
        }
    }
}
